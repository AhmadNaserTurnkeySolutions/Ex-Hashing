/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PaintPanel.java
 */
package bzu.hashing;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.JProgressBar;
import sun.font.Font2D;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;


public class PaintPanel extends javax.swing.JPanel
{

    /** Creates new form PaintPanel */
   public ArrayList<NodePaint>nPaint;
   public ArrayList<LinePaint>lPaint;
   public int New;
   public JProgressBar bar;
   private Image BackGroundimage;
    public PaintPanel()
    {
        initComponents();
    }
    public void paintHash()
    {
        repaint();
    }
     public void setImage(Image image) {
        this.BackGroundimage = image;
        Dimension size=new Dimension(this.getWidth(),this.getHeight());
        this.setPreferredSize(size);
        this.setMinimumSize(size);
        this.setMaximumSize(size);
        this.setSize(size);
        this.setOpaque(false);
    }
     
        public Image getImage() {
        return BackGroundimage;
    }
    @Override
    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        if(this.BackGroundimage!=null){
g.drawImage(BackGroundimage, 0, 0,this.getWidth(),this.getHeight(),null);
}
        //Font font=new Font(Font.SANS_SERIF, Font.BOLD, 13);
        //g.setFont(font);
        LinePaint linePaint;
        NodePaint nodePaint;
        int width=100;
        int height=25;
        int squareDim=27;
        int oldProgress = 0;
        int newProgress=0;
          int totalSize=0;
        if(lPaint!=null)
            totalSize=lPaint.size()-1;
        if(nPaint!=null)
            totalSize+=nPaint.size();
        if(bar!=null)
            bar.setMaximum(100);
        int R,G,B;
        Color randomColor = Color.WHITE;
        if(lPaint!=null&&lPaint.size()>0)
        {

            g.drawRect(lPaint.get(0).x1+80, lPaint.get(0).y1, 20, 20);
            g.drawString(lPaint.get(0).globalDepth,lPaint.get(0).x1+80, lPaint.get(0).y1+18);
            for(int i=1;i<lPaint.size();i++)
            {
                linePaint=lPaint.get(i);
                g.drawString(linePaint.index,linePaint.x1-(linePaint.x1/4), linePaint.y1+20);
                g.drawRect(linePaint.x1, linePaint.y1, width, height);
                if(linePaint.x2!=-1&&linePaint.y2!=-1)
                {
                    //g.drawLine(linePaint.x1+100,linePaint.y1+10, linePaint.x2, linePaint.y2+10);old
                    R = (int) (Math.random( )*255);
                    G = (int)(Math.random( )*255);
                    B= (int)(Math.random( )*255);
                    randomColor = new Color(255,255,255);//new Color(R, G, B);
                    g.setColor(randomColor);
                    g.drawLine(linePaint.x1+100,linePaint.y1+10, linePaint.x2+200, linePaint.y2+10);
                    g.setColor(Color.white);
                }
                if(bar!=null)
                {
                    oldProgress=(i*100)/totalSize;
                    bar.setValue(oldProgress);
                }
            }
        }
        if(nPaint!=null&&nPaint.size()>0)
        {
            for(int i=0;i<nPaint.size();i++)
            {
                nodePaint=nPaint.get(i);
                g.drawRect(nodePaint.x[0], nodePaint.y-20, 30, 20);
                g.drawString(nodePaint.localDepth, nodePaint.x[0]+3, nodePaint.y);
                for(int y=0;y<4;y++)//nodes
                {
                    g.drawRect(nodePaint.x[y], nodePaint.y, squareDim, squareDim);
                    if(nodePaint.values[y]!=-1)
                    {
                        if(nodePaint.values[y]==New)
                            g.setColor(Color.red);
                        g.drawString(nodePaint.values[y]+"", nodePaint.x[y]+3, nodePaint.y+25);
                        g.setColor(Color.white);
                    }
                }
                if(bar!=null)
                {
                    newProgress=oldProgress+i;
                    newProgress=(newProgress*100)/totalSize;
                    bar.setValue(newProgress);
                }
            }
        }
   
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
